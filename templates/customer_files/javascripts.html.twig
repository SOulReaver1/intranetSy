{% block javascripts %} 
<script src="{{asset('assets/js/plugins/semantic/semantic.js')}}"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script
    src="https://maps.googleapis.com/maps/api/js?key={{google_maps_api_key}}&callback=initAutocomplete&libraries=places&v=weekly"
    defer
></script>
<script>
let placeSearch;
let autocomplete;

const componentForm = {
street_number: "short_name",
route: "long_name",
locality: "long_name",
administrative_area_level_1: "long_name",
country: "long_name",
postal_code: "short_name",
};

function initAutocomplete() {
// Create the autocomplete object, restricting the search predictions to
// geographical location types.
autocomplete = new google.maps.places.Autocomplete(
    document.getElementById("autocomplete"),
    { types: ["geocode"] }
);
// Avoid paying for data that you don't need by restricting the set of
// place fields that are returned to just the address components.
autocomplete.setFields(["address_component", "geometry"]);
// When the user selects an address from the drop-down, populate the
// address fields in the form.
autocomplete.addListener("place_changed", fillInAddress);
}

function fillInAddress() {
// Get the place details from the autocomplete object.
const place = autocomplete.getPlace();
const geometry = place.geometry.location;

document.getElementById('lat').value = geometry.lat();
document.getElementById('lng').value = geometry.lng();

for (const component in componentForm) {
    document.getElementById(component).value = "";
}

// Get each component of the address from the place details,
// and then fill-in the corresponding field on the form.
for (const component of place.address_components) {
    const addressType = component.types[0];

    if (componentForm[addressType]) {
    const val = component[componentForm[addressType]];
    document.getElementById(addressType).value = val;
    }

}
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition((position) => {
    const geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
    };
    const circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy,
    });
    autocomplete.setBounds(circle.getBounds());
    });
}
}

const provider = document.getElementById('providers');

provider.addEventListener('change', evt => {
    fetch(`/getProviderParams/${evt.target.value}`, {
        method: 'POST'
    }).then(response => response.json())
    .then(data => {
        console.log(data)
        const providerParams = document.getElementById('providerParams');
        document.getElementById('providerParamsParent').style.display = "block";
        for(const [key, value] of Object.entries(data)){
            const option = document.createElement('option');
            option.value = key;
            option.append(value);
            providerParams.append(option);
        }
    })
});
$('#providerParams').dropdown({
    onChange: (array, id, val) => {
        if(array){
            fetch(`/getProviderProducts/${provider.value}`, {
            method: 'POST',
            "Content-Type": "application/json",
            body: JSON.stringify({data: array})
            }).then(response => response.json())
            .then(data => {
                console.log(data)
                if(document.getElementById('alreadyProduct')){
                    document.getElementById('alreadyProduct').style.display = "none"
                }
                document.getElementById('providerProductsParent').style.display = "block";
                const providerProducts = document.getElementById('providerProducts')
                providerProducts.innerHTML = '';
                for(const [key, value] of Object.entries(data)){
                    const option = document.createElement('option');
                    option.value = key;
                    option.append(value);
                    providerProducts.append(option);
                }
            })
        }
    }
});
</script>
{% endblock %}
